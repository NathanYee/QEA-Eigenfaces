(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     14063,        457]
NotebookOptionsPosition[     11775,        381]
NotebookOutlinePosition[     12750,        416]
CellTagsIndexPosition[     12707,        413]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Basic setup", "Section"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\n", 
 RowBox[{"Needs", "[", "\"\<Imports`\>\"", "]"}]}], "Code",
 CellChangeTimes->{
  3.670233912893641*^9, {3.670234238014649*^9, 3.670234249251326*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"neutralFaces", "=", 
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "@", "images"}], ",", "8"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Dimensions", "@", "neutralFaces"}], "\n", 
 RowBox[{"m", "=", 
  RowBox[{
   RowBox[{"Dimensions", "[", "neutralFaces", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 1: Understand the dimensions along which faces differ", "Section"],

Cell["\<\
flattenedNeutralFaces is a matrix containing, as rows, each of the neutral \
face images.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"flattenedNeutralFaces", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"Flatten", "[", 
     RowBox[{"neutralFaces", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "flattenedNeutralFaces"}], "\n", 
 RowBox[{
  RowBox[{"normalizedFaces", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "/", 
      RowBox[{"Mean", "[", "#", "]"}]}], "&"}], "/@", 
    "flattenedNeutralFaces"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "normalizedFaces"}]}], "Code"],

Cell["Create the giant correlation matrix", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"corr1", "=", 
   RowBox[{"normalizedFaces", ".", 
    RowBox[{"Transpose", "[", "normalizedFaces", "]"}]}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "corr1"}]}], "Code"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"lambdas", ",", "vectors"}], "}"}], " ", "=", " ", 
   RowBox[{"Eigensystem", "[", "corr1", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"lambdas", "=", 
   RowBox[{"Sqrt", "/@", "lambdas"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"vectors", "=", 
   RowBox[{"Transpose", "@", "vectors"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "lambdas"}], "\n", 
 RowBox[{"Dimensions", "@", "vectors"}]}], "Code",
 CellChangeTimes->{{3.670233984033493*^9, 3.670233998052384*^9}, 
   3.670234086022299*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"eigenfaces", "=", 
   RowBox[{
    RowBox[{"Transpose", "[", "normalizedFaces", "]"}], ".", "vectors"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"eigenfaces", "=", 
   RowBox[{"Transpose", "[", "eigenfaces", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"eigenfaces", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Normalize", ",", "eigenfaces"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "eigenfaces"}]}], "Code"],

Cell[BoxData[{
 RowBox[{"Dimensions", "[", "vectors", "]"}], "\n", 
 RowBox[{
  RowBox[{"vectors", "[", 
   RowBox[{"[", "1", "]"}], "]"}], ".", 
  RowBox[{"vectors", "[", 
   RowBox[{"[", "2", "]"}], "]"}]}], "\n", 
 RowBox[{"Dimensions", "[", "eigenfaces", "]"}], "\n", 
 RowBox[{
  RowBox[{"eigenfaces", "[", 
   RowBox[{"[", "3", "]"}], "]"}], ".", 
  RowBox[{"eigenfaces", "[", 
   RowBox[{"[", "7", "]"}], "]"}]}]}], "Code",
 InitializationCell->False],

Cell["I wonder what the columns of v look like?", "Text"],

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Prepend", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"lambdas", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "\n", 
        RowBox[{"ImageAdjust", "@", 
         RowBox[{"Image", "@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"eigenfaces", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "256"}], "]"}]}]}]}], "}"}],
       ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "10"}], "}"}]}], "]"}], " ", ",", "\n", 
    RowBox[{"{", 
     RowBox[{
     "\"\<id\>\"", ",", "\"\<Singular Value\>\"", ",", "\"\<Vector\>\""}], 
     "}"}]}], "]"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.670234540211706*^9, 3.670234544887525*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 2: Use the eigenfaces to compress new images", "Section"],

Cell["\<\
Next, we need to learn how to compress an image into components of our \
eigenfaces (orthagonal eigenvectors).\
\>", "Text"],

Cell["\<\
First, we create a function, \[OpenCurlyDoubleQuote]eigenCompress\
\[CloseCurlyDoubleQuote], that takes in as inputs: an image, the eigenfaces, \
and an accuracy parameter.  The function returns a compressed version of the \
input image expressed as linear combinations of the eigenfaces.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"eigenCompress", "[", 
   RowBox[{"image_", ",", "eigenfaces_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "imageFlat", "}"}], ",", "\n", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "face", " ", "is", " ", "a", " ", "1", "d", " ", "vector", " ", 
       "here"}], ",", " ", 
      RowBox[{
      "and", " ", "is", " ", "treated", " ", "implicitly", " ", "as", " ", 
       "a", " ", "row", " ", 
       RowBox[{"vector", "."}]}]}], " ", "*)"}], "\n", 
    RowBox[{"(*", 
     RowBox[{"TODO", ":", " ", 
      RowBox[{"make", " ", "face", " ", "an", " ", "image", " ", "input"}]}], 
     "*)"}], "\n", 
    RowBox[{
     RowBox[{"imageFlat", "=", 
      RowBox[{"Flatten", "@", "image"}]}], ";", "\n", 
     RowBox[{"Return", "[", 
      RowBox[{
       RowBox[{"eigenfaces", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "n"}], "]"}], "]"}], ".", "imageFlat"}], 
      "]"}]}]}], "\n", "]"}]}]], "Code"],

Cell["\<\
Second, create a function, \[OpenCurlyDoubleQuote]eigenDecompression\
\[CloseCurlyDoubleQuote], that takes in as inputs: an eigenfaces compressed \
image, and the eigenfaces.  The function returns an image.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"eigenDecompress", "[", 
   RowBox[{"compressedImage_", ",", "eigenfaces_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "decompressedData", "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"decompressedData", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"MapThread", "[", 
          RowBox[{"Times", ",", 
           RowBox[{"{", 
            RowBox[{"compressedImage", ",", 
             RowBox[{"eigenfaces", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "n"}], "]"}], "]"}]}], "}"}]}], "]"}], 
         "]"}], ",", "256"}], "]"}]}], ";", "\n", 
     RowBox[{"Return", "[", 
      RowBox[{"Image", "@", "decompressedData"}], "]"}]}]}], "\n", 
   "]"}]}]], "Code"],

Cell["\<\
Define \[OpenCurlyDoubleQuote]depth\[CloseCurlyDoubleQuote], the number of \
eigenfaces used to compress and decompress the image\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "@", "depth"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"depth", ":=", "30"}], ";"}]}], "Code",
 CellChangeTimes->{{3.670234585380802*^9, 3.670234602720825*^9}}],

Cell["\<\
Now, compress and uncompress an image not in the training set.  \
\[OpenCurlyDoubleQuote]me\[CloseCurlyDoubleQuote] is an image of Eric that we \
will use to verify the compression and decompression functions.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"eigenme", "=", 
   RowBox[{"eigenCompress", "[", 
    RowBox[{"me", ",", "eigenfaces", ",", "depth"}], "]"}]}], ";"}], "\n", 
 RowBox[{"eigenDecompress", "[", 
  RowBox[{"eigenme", ",", "eigenfaces", ",", "depth"}], "]"}]}], "Code",
 InitializationCell->False],

Cell["\<\
Above we can see an image of Eric that has been expressed as linear \
combinations of the 30 most influential eigenfaces.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 3: Start recognizing faces", "Section"],

Cell["\<\
First, we create a training set that will be used to identify individual \
images.  The training set will consist of one image of each person expressed \
as the first n eigenfaces of each person.  \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingFaces", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"eigenCompress", "[", 
       RowBox[{"#", ",", "eigenfaces", ",", "depth"}], "]"}], "&"}], ",", 
     "normalizedFaces"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "trainingFaces"}]}], "Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"recognizeFace", "[", "face_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"i", "=", 
      RowBox[{
       RowBox[{"Nearest", "[", 
        RowBox[{
         RowBox[{"trainingFaces", "->", "Automatic"}], ",", 
         RowBox[{"eigenCompress", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", "face"}], ",", "eigenfaces", ",", 
           "depth"}], "]"}], ",", "2"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
     RowBox[{"{", 
      RowBox[{"Image", "[", 
       RowBox[{"neutralFaces", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "]"}], "}"}]}]}], "\n", 
   "]"}]}]], "Code"],

Cell[BoxData[
 RowBox[{"Nearest", "[", 
  RowBox[{
   RowBox[{"trainingFaces", "->", 
    RowBox[{"Image", "/@", "neutralFaces"}]}], ",", 
   RowBox[{"eigenCompress", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", "me"}], ",", "eigenfaces", ",", "depth"}], "]"}],
    ",", "3"}], "]"}]], "Code"],

Cell[BoxData[{
 RowBox[{"Length", "@", 
  RowBox[{"trainingFaces", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
 RowBox[{"Length", "@", 
  RowBox[{"eigenCompress", "[", 
   RowBox[{
    RowBox[{"Flatten", "@", "me"}], ",", "eigenfaces", ",", "depth"}], 
   "]"}]}]}], "Code"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"recognizeFace", "[", 
    RowBox[{"face_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "i", "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"i", "=", 
       RowBox[{"Nearest", "[", 
        RowBox[{
         RowBox[{"trainingFaces", "->", "Automatic"}], ",", 
         RowBox[{"eigenCompress", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", "face"}], ",", "eigenfaces", ",", 
           "depth"}], "]"}], ",", "n"}], "]"}]}], ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Image", ",", 
         RowBox[{"neutralFaces", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{"recognizeFace", "[", 
  RowBox[{"me", ",", "3"}], "]"}]}], "Code"],

Cell[BoxData[
 RowBox[{"Dimensions", "@", "neutralFaces"}]], "Code"],

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Image", "[", "face", "]"}], ",", "\"\<\[Rule]\>\""}], "}"}], 
      ",", 
      RowBox[{"recognizeFace", "[", "face", "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"face", ",", 
      RowBox[{"images", "[", 
       RowBox[{"[", 
        RowBox[{"3", ";;", "100", ";;", "8"}], "]"}], "]"}]}], "}"}]}], 
   "]"}]}]], "Code"]
}, Open  ]]
},
EvaluatorNames->{"Local" -> {"AutoStartOnLaunch" -> True}},
NotebookAutoSave->True,
ClosingAutoSave->False,
ClosingSaveDialog->True,
CloseOnClickOutside->False,
IncludeFileExtension->True,
FileChangeProtection->Automatic,
AutoGeneratedPackage->Automatic,
Editable->True,
Saveable->True,
Evaluator->"Local",
EvaluationCompletionAction->{},
PrintAction->"PrintToNotebook",
OutputAutoOverwrite->True,
InitializationCellEvaluation->Automatic,
InitializationCellWarning->True,
NotebookEventActions->None,
NotebookDynamicExpression:>Null,
WindowSize->{960, 1028},
WindowMargins->{{-10, Automatic}, {Automatic, -10}},
TrackCellChangeTimes->False,
FrontEndVersion->"10.3 for Linux x86 (64-bit) (December 10, 2015)",
StyleDefinitions->FrontEnd`FileName[{"Article"}, "JournalArticle.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 30, 0, 52, "Section"],
Cell[613, 24, 267, 6, 71, "Code"],
Cell[883, 32, 438, 13, 90, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1358, 50, 77, 0, 52, "Section"],
Cell[1438, 52, 113, 3, 23, "Text"],
Cell[1554, 57, 562, 16, 109, "Code"],
Cell[2119, 75, 51, 0, 23, "Text"],
Cell[2173, 77, 208, 5, 71, "Code"],
Cell[2384, 84, 556, 15, 128, "Code"],
Cell[2943, 101, 452, 13, 109, "Code"],
Cell[3398, 116, 458, 13, 109, "Code",
 InitializationCell->False],
Cell[3859, 131, 57, 0, 23, "Text"],
Cell[3919, 133, 826, 24, 90, "Code",
 InitializationCell->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[4782, 162, 68, 0, 52, "Section"],
Cell[4853, 164, 134, 3, 23, "Text"],
Cell[4990, 169, 312, 5, 41, "Text"],
Cell[5305, 176, 1002, 28, 148, "Code"],
Cell[6310, 206, 230, 4, 41, "Text"],
Cell[6543, 212, 813, 22, 110, "Code"],
Cell[7359, 236, 153, 3, 23, "Text"],
Cell[7515, 241, 199, 5, 71, "Code"],
Cell[7717, 248, 233, 4, 41, "Text"],
Cell[7953, 254, 296, 7, 71, "Code",
 InitializationCell->False],
Cell[8252, 263, 145, 3, 23, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8434, 271, 50, 0, 52, "Section"],
Cell[8487, 273, 221, 4, 41, "Text"],
Cell[8711, 279, 326, 9, 71, "Code"],
Cell[9040, 290, 726, 21, 110, "Code"],
Cell[9769, 313, 296, 8, 51, "Code"],
Cell[10068, 323, 280, 8, 71, "Code"],
Cell[10351, 333, 838, 24, 129, "Code"],
Cell[11192, 359, 68, 1, 51, "Code"],
Cell[11263, 362, 496, 16, 51, "Code"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
