Notebook[{

Cell[CellGroupData[{
Cell["Basic setup", "Section"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\n", 
 RowBox[{"Needs", "[", "\"\<Imports`\>\"", "]"}]}], "Code",
 CellChangeTimes->{
  3.670233912893641*^9, {3.670234238014649*^9, 3.670234249251326*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"neutralFaces", "=", 
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "@", "images"}], ",", "8"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Dimensions", "@", "neutralFaces"}]}], "Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 1: Understand the dimensions along which faces differ", "Section"],

Cell[CellGroupData[{

Cell["Normalizing the input data", "Subsection"],

Cell["\<\
Because the Eigenfaces algorithm treats each image as a vector in \
mxn-dimensional vector space, each two-dimensional image must be flattened \
into a one-dimensional vector. The resulting output is a list of image \
vectors, alternately interpreted as a matrix containing image vectors as rows.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"flattenedNeutralFaces", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Flatten", ",", " ", "neutralFaces"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "flattenedNeutralFaces"}]}], "Code"],

Cell["\<\
Next, to remove any differences in image brightness, we subtract the mean of \
the elements of each face vector from each element of that vector. This \
ensures that all of the images are cenetered around \[OpenCurlyDoubleQuote]0\
\[CloseCurlyDoubleQuote], improving the consistency of the algorithm and \
allowing the covariance matrix to also represent correlation.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizedFaces", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "-", 
       RowBox[{"Mean", "[", "#", "]"}]}], "&"}], ",", " ", 
     "flattenedNeutralFaces"}], "]"}]}], ";"}]], "Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding the Eigenfaces", "Subsection"],

Cell[TextData[{
 "Ultimately, we desire a set of Eigenfaces, which represent the axes of \
greatest correlation in the 92,160-dimensional image space. This requires \
computing the eigenvectors with nonzero eigenvalues of the pixel-pixel \
correlation matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[{"normalizedFaces"},
     "Transpose"], ".", "normalizedFaces"}], TraditionalForm]], "Code"],
 ". Unfortunately, this  matrix is extremely large (92160x92160), so \
explicitly computing it is infeasable for large datasets."
}], "Text"],

Cell[TextData[{
 "Instead, we first compute the eigenvectors of the smaller image-image \
correlation matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"normalizedFaces", ".", 
    TemplateBox[{"normalizedFaces"},
     "Transpose"]}], TraditionalForm]], "Code"],
 ", then observe that for each ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " that is an eigenvector of the image-image correlation matrix, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["normalizedFaces", "T"], "\[Cross]", "v"}], 
   TraditionalForm]]],
 " is an eigenface with the same eigenvalue ",
 Cell[BoxData[
  FormBox["\[Lambda]", TraditionalForm]]],
 ".  With ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", "normalizedFaces"}], TraditionalForm]]],
 ","
}], "Text"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", "\[Cross]", 
      SuperscriptBox["A", "T"]}], ")"}], "\[Cross]", "v"}], "=", 
   RowBox[{"\[Lambda]", " ", "v"}]}], TraditionalForm]], "EquationNumbered"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["A", "T"], "(", 
     RowBox[{"A", "\[Cross]", 
      SuperscriptBox["A", "T"]}], ")"}], "\[Cross]", "v"}], "=", 
   RowBox[{
    RowBox[{
     SuperscriptBox["A", "T"], "\[Cross]", "\[Lambda]"}], " ", "v"}]}], 
  TraditionalForm]], "Equation"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["A", "T"], "\[Cross]", "A"}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["A", "T"], "v"}], ")"}]}], "=", 
   RowBox[{
    RowBox[{
     SuperscriptBox["A", "T"], "\[Cross]", "\[Lambda]"}], " ", "v"}]}], 
  TraditionalForm]], "Equation"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["A", "T"], "\[Cross]", "A"}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["A", "T"], "v"}], ")"}]}], "=", 
   RowBox[{"\[Lambda]", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["A", "T"], "\[Cross]", "v"}], ")"}]}]}], 
  TraditionalForm]], "EquationNumbered"],

Cell["Implementing the above equation in code:", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findEigenfaces", "[", "normalizedFaces_", "]"}], ":=", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    FormBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", " ", "=", " ", 
        RowBox[{"normalizedFaces", ".", 
         RowBox[{"Transpose", "[", "normalizedFaces", "]"}]}]}], ",", 
       "lambdas", ",", "vectors", ",", "eigenvalues", ",", "eigenfaces"}], 
      "}"}],
     TraditionalForm], ",", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lambdas", ",", "vectors"}], "}"}], " ", "=", " ", 
      RowBox[{"Eigensystem", "[", "A", "]"}]}], ";", "\n", 
     RowBox[{"vectors", " ", "=", " ", 
      RowBox[{"Transpose", "@", "vectors"}]}], ";", "\n", 
     RowBox[{"eigenvalues", " ", "=", " ", 
      RowBox[{"Sqrt", "/@", "lambdas"}]}], ";", "\n", 
     RowBox[{"eigenfaces", " ", "=", " ", 
      RowBox[{
       RowBox[{"Transpose", "[", "normalizedFaces", "]"}], ".", "vectors"}]}],
      ";", "\n", 
     RowBox[{"eigenfaces", " ", "=", " ", 
      RowBox[{"Transpose", "[", "eigenfaces", "]"}]}], ";", "\n", 
     RowBox[{"eigenfaces", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{"Normalize", ",", "eigenfaces"}], "]"}]}], ";", "\n", 
     RowBox[{"{", 
      RowBox[{"eigenvalues", ",", "eigenfaces"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"eigenvalues", ",", " ", "eigenfaces"}], "}"}], "=", 
   RowBox[{"findEigenfaces", "[", "normalizedFaces", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "eigenfaces"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "eigenvalues"}]}], "Input",
 InitializationCell->True],

Cell["\<\
As expected, the eigenfaces are all orthogonal (or nearly so) because they \
are eigenvectors of a correlation matrix. \
\>", "Text"],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"RandomChoice", "[", "eigenfaces", "]"}], ".", 
     RowBox[{"RandomChoice", "[", "eigenfaces", "]"}]}], "]"}], ",", "3"}], 
  "]"}]], "Input"],

Cell[TextData[{
 "Interestingly, because the eigenfaces are 92,160-element vectors, it is \
possible to unflatten them using ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Partition", "[", "]"}], TraditionalForm]]],
 " and display the result as an image. The results look haunting, and \
represent the directions of maximum variability within the set of images."
}], "Text"],

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Prepend", "[", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"eigenvalues", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", 
        RowBox[{"ImageAdjust", "@", 
         RowBox[{"Image", "@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"eigenfaces", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "256"}], "]"}]}]}]}], "}"}],
       ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "5"}], "}"}]}], "]"}], " ", ",", "\n", 
    RowBox[{"{", 
     RowBox[{
     "\"\<id\>\"", ",", "\"\<Singular Value\>\"", ",", "\"\<Vector\>\""}], 
     "}"}]}], "]"}]}]], "Input",
 InitializationCell->False]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 2: Use the eigenfaces to compress new images", "Section"],

Cell["\<\
Next, we need to learn how to compress an image into components of our \
eigenfaces (orthagonal eigenvectors).\
\>", "Text"],

Cell["\<\
First, we create a function, \[OpenCurlyDoubleQuote]eigenCompress\
\[CloseCurlyDoubleQuote], that takes in as inputs: an image, the eigenfaces, \
and an accuracy parameter.  The function returns a compressed version of the \
input image expressed as linear combinations of the eigenfaces.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"eigenCompress", "[", 
   RowBox[{"image_", ",", "eigenfaces_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "imageFlat", "}"}], ",", "\n", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "face", " ", "is", " ", "a", " ", "1", "d", " ", "vector", " ", 
       "here"}], ",", " ", 
      RowBox[{
      "and", " ", "is", " ", "treated", " ", "implicitly", " ", "as", " ", 
       "a", " ", "row", " ", 
       RowBox[{"vector", "."}]}]}], " ", "*)"}], "\n", 
    RowBox[{"(*", 
     RowBox[{"TODO", ":", " ", 
      RowBox[{"make", " ", "face", " ", "an", " ", "image", " ", "input"}]}], 
     "*)"}], "\n", 
    RowBox[{
     RowBox[{"imageFlat", "=", 
      RowBox[{"Flatten", "@", "image"}]}], ";", "\n", 
     RowBox[{"imageFlat", "=", 
      RowBox[{"imageFlat", " ", "-", " ", 
       RowBox[{"Mean", "@", "imageFlat"}]}]}], ";", "\n", 
     RowBox[{"Return", "[", 
      RowBox[{
       RowBox[{"eigenfaces", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "n"}], "]"}], "]"}], ".", "imageFlat"}], 
      "]"}]}]}], "\n", "]"}]}]], "Code"],

Cell["\<\
Second, create a function, \[OpenCurlyDoubleQuote]eigenDecompression\
\[CloseCurlyDoubleQuote], that takes in as inputs: an eigenfaces compressed \
image, and the eigenfaces.  The function returns an image.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"eigenDecompress", "[", 
   RowBox[{"compressedImage_", ",", "eigenfaces_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "decompressedData", "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"decompressedData", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"MapThread", "[", 
          RowBox[{"Times", ",", 
           RowBox[{"{", 
            RowBox[{"compressedImage", ",", 
             RowBox[{"eigenfaces", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "n"}], "]"}], "]"}]}], "}"}]}], "]"}], 
         "]"}], ",", "256"}], "]"}]}], ";", "\n", 
     RowBox[{"Return", "[", 
      RowBox[{"ImageAdjust", "@", 
       RowBox[{"Image", "@", "decompressedData"}]}], "]"}]}]}], "\n", 
   "]"}]}]], "Code"],

Cell["\<\
Define \[OpenCurlyDoubleQuote]depth\[CloseCurlyDoubleQuote], the number of \
eigenfaces used to compress and decompress the image\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "@", "depth"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"depth", ":=", "30"}], ";"}]}], "Code"],

Cell["\<\
Now, compress and uncompress an image not in the training set. \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"eigeneric", "=", 
   RowBox[{"eigenCompress", "[", 
    RowBox[{"eric", ",", "eigenfaces", ",", "depth"}], "]"}]}], ";"}], "\n", 
 RowBox[{"eigenDecompress", "[", 
  RowBox[{"eigeneric", ",", "eigenfaces", ",", "depth"}], "]"}]}], "Code",
 InitializationCell->False],

Cell["\<\
Above we can see an image of Eric that has been expressed as linear \
combinations of the 30 most influential eigenfaces.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Step 3: Start recognizing faces", "Section"],

Cell["\<\
First, we create a training set that will be used to identify individual \
images.  The training set will consist of one image of each person expressed \
as the first n eigenfaces of each person.  \
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingFaces", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"eigenCompress", "[", 
       RowBox[{"#", ",", "eigenfaces", ",", "depth"}], "]"}], "&"}], ",", 
     "normalizedFaces"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Dimensions", "@", "trainingFaces"}]}], "Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"recognizeFace", "[", "face_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"i", "=", 
      RowBox[{
       RowBox[{"Nearest", "[", 
        RowBox[{
         RowBox[{"trainingFaces", "->", "Automatic"}], ",", 
         RowBox[{"eigenCompress", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", "face"}], ",", "eigenfaces", ",", 
           "depth"}], "]"}], ",", "2"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
     RowBox[{"{", 
      RowBox[{"Image", "[", 
       RowBox[{"neutralFaces", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "]"}], "}"}]}]}], "\n", 
   "]"}]}]], "Code"],

Cell[BoxData[
 RowBox[{"Nearest", "[", 
  RowBox[{
   RowBox[{"trainingFaces", "->", 
    RowBox[{"Image", "/@", "neutralFaces"}]}], ",", 
   RowBox[{"eigenCompress", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", "me"}], ",", "eigenfaces", ",", "depth"}], "]"}],
    ",", "3"}], "]"}]], "Code",
 InitializationCell->False],

Cell[BoxData[{
 RowBox[{"Length", "@", 
  RowBox[{"trainingFaces", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
 RowBox[{"Length", "@", 
  RowBox[{"eigenCompress", "[", 
   RowBox[{
    RowBox[{"Flatten", "@", "me"}], ",", "eigenfaces", ",", "depth"}], 
   "]"}]}]}], "Code",
 InitializationCell->False],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"recognizeFace", "[", 
    RowBox[{"face_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "i", "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"i", "=", 
       RowBox[{"Nearest", "[", 
        RowBox[{
         RowBox[{"trainingFaces", "->", "Automatic"}], ",", 
         RowBox[{"eigenCompress", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", "face"}], ",", "eigenfaces", ",", 
           "depth"}], "]"}], ",", "n"}], "]"}]}], ";", "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Image", ",", 
         RowBox[{"neutralFaces", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code"],

Cell[BoxData[{
 RowBox[{"recognizeFace", "[", 
  RowBox[{"eric", ",", "3"}], "]"}], "\n", 
 RowBox[{"recognizeFace", "[", 
  RowBox[{"nathan", ",", "3"}], "]"}]}], "Code",
 InitializationCell->False],

Cell[BoxData[
 RowBox[{"Dimensions", "@", "neutralFaces"}]], "Code",
 InitializationCell->False],

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Image", "[", "face", "]"}], ",", "\"\<\[Rule]\>\""}], "}"}], 
      ",", 
      RowBox[{"recognizeFace", "[", "face", "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"face", ",", 
      RowBox[{"images", "[", 
       RowBox[{"[", 
        RowBox[{"3", ";;", "100", ";;", "8"}], "]"}], "]"}]}], "}"}]}], 
   "]"}]}]], "Code",
 InitializationCell->False]
}, Open  ]]
},
EvaluatorNames->{"Local" -> {"AutoStartOnLaunch" -> True}},
NotebookAutoSave->True,
ClosingAutoSave->False,
ClosingSaveDialog->True,
CloseOnClickOutside->False,
IncludeFileExtension->True,
FileChangeProtection->Automatic,
AutoGeneratedPackage->Automatic,
Editable->True,
Saveable->True,
Evaluator->"Local",
EvaluationCompletionAction->{},
PrintAction->"PrintToNotebook",
OutputAutoOverwrite->True,
InitializationCellEvaluation->Automatic,
InitializationCellWarning->True,
NotebookEventActions->None,
NotebookDynamicExpression:>Null,
WindowSize->{1497, 1013},
WindowMargins->{{-9, Automatic}, {Automatic, -8}},
TrackCellChangeTimes->False,
Magnification:>1.5 Inherited,
FrontEndVersion->"10.3 for Linux x86 (64-bit) (October 9, 2015)",
StyleDefinitions->FrontEnd`FileName[{"Article"}, "JournalArticle.nb", 
  CharacterEncoding -> "UTF-8"]
]

