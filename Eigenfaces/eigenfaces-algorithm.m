(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



SetDirectory@NotebookDirectory[];
Needs["Imports`"]


neutralFaces=images[[Range[1,Length@images,8]]];
Dimensions@neutralFaces


flattenedNeutralFaces=Map[Flatten, neutralFaces];
Dimensions@flattenedNeutralFaces


normalizedFaces=Map[#-Mean[#]&, flattenedNeutralFaces];


findEigenfaces[normalizedFaces_]:=findEigenfaces[normalizedFaces]=
Module[\!\(TraditionalForm\`{A\  = \ normalizedFaces . Transpose[normalizedFaces], lambdas, vectors, eigenvalues, eigenfaces}\),
{lambdas,vectors} = Eigensystem[A];
vectors = Transpose@vectors;
eigenvalues = Sqrt/@lambdas;
eigenfaces = Transpose[normalizedFaces].vectors;
eigenfaces = Transpose[eigenfaces];
eigenfaces = Map[Normalize,eigenfaces];
{eigenvalues,eigenfaces}
]


{eigenvalues, eigenfaces}=findEigenfaces[normalizedFaces];
Dimensions@eigenfaces
Dimensions@eigenvalues


eigenCompress[image_,eigenfaces_,n_]:=Module[{imageFlat},
(* face is a 1d vector here, and is treated implicitly as a row vector. *)
(*TODO: make face an image input*)
imageFlat=Flatten@image;
imageFlat=imageFlat - Mean@imageFlat;
Return[eigenfaces[[1;;n]].imageFlat]
]


eigenDecompress[compressedImage_,eigenfaces_,n_]:=Module[{decompressedData},
decompressedData=Partition[Total[MapThread[Times,{compressedImage,eigenfaces[[1;;n]]}]],256];
Return[ImageAdjust@Image@decompressedData]
]


Clear@depth;
depth:=30;


trainingFaces=Map[eigenCompress[#,eigenfaces,depth]&,normalizedFaces];
Dimensions@trainingFaces


recognizeFace[face_]:=Module[{i},
i=Nearest[trainingFaces->Automatic,eigenCompress[Flatten@face,eigenfaces,depth],2][[1]];
{Image[neutralFaces[[i]]]}
]


recognizeFace[face_,depth_,n_]:=Module[{i},
i=Nearest[trainingFaces->Automatic,eigenCompress[Flatten@face,eigenfaces,depth],n];
Return[{i,Map[Image,neutralFaces[[i]]]}]
];
recognizeFace[face_,n_]:=Module[{},
recognizeFace[face,depth,n][[2]]
]



